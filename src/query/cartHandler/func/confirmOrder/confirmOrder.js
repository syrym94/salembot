var emoji = require('node-emoji')

var messageFromUser = require("../../../../../index");
const showMessage = (text, id, slimbot) => {
  const params = {
    text,
    show_alert: true
  };
  slimbot.answerCallbackQuery(id, params);
};

const confirmOrder = async data => {
  var incomingOrder = require('../../../../message/src/botDefault/cart/util')
  if(messageFromUser.mes === '–ö–æ—Ä–∑–∏–Ω–∞üõí'){
  let arr = [];
  arr.push(
    [
      {
        text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data: JSON.stringify({
          data: incomingOrder.order.id,
          action: "b"
      })}
    ]
    )
  const params = {
    parse_mode: "Markdown",
    reply_markup: JSON.stringify({
      inline_keyboard: arr
    })
  };
  data.slimbot.editMessageText(
    data.query.message.chat.id,
    data.query.message.message_id,
    emoji.emojify(`–°–æ—Å–µ–¥, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äú–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑‚Äù:grin:`),
    params
  )
  const rawData = await data.ms.PUT(
    `entity/customerorder/${incomingOrder.order.id}`,
    {
      state: {
        meta: {
        href: 'https://online.moysklad.ru/api/remap/1.1/entity/customerorder/metadata/states/f5a40ec5-205d-11e9-9ff4-34e80000bb5f',
        metadataHref: 'https://online.moysklad.ru/api/remap/1.1/entity/customerorder/metadata',
        type: 'state',
        mediaType: 'application/json'
      },
        name: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      }
    }
  )
  } else {
  showMessage(emoji.emojify(`–†–∞—Ö–º–µ—Ç, —Å–æ—Å–µ–¥, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø–æ —É–∫–∞–∑–∞–Ω–æ–º—É –≤ telegram –Ω–æ–º–µ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ :rocket:`), data.query.id, data.slimbot)
  data.slimbot.sendMessage(
    '@salemsosedtelegram',`–ù–æ–≤—ã–π –∑–∞–∫–∞–∑`)
  }

  if(messageFromUser.mes !== undefined && messageFromUser.mes !== '–ö–æ—Ä–∑–∏–Ω–∞üß©'){
  let counterparty = await data.ms.GET(
    `entity/counterparty`,{filter: {
      code: data.query.from.id},
    }
  );
  let address = await data.ms.PUT(`entity/counterparty/${counterparty.rows[0].id}`,{ actualAddress: `${messageFromUser.mes}` },)
  }
  // data.slimbot.on("message", message => {
  //   data.slimbot.sendMessage(
  //     data.query.from.id,
  //     `–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏`
  //   );
  // });

  // let orderID = JSON.parse(data.query.data)
  // let orderConfirm = await data.ms.GET(`entity/customerorder/${orderID.data}`)

  //   let chat_id = data.query.from.id
  //   let title = '–ö–æ—Ä–∑–∏–Ω–∞'
  //   let description = ' –¶–µ–Ω–∞ –∑–∞ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –ö–æ—Ä–∑–∏–Ω–µ'
  //   let need_name = true
  //   let need_phone_number = true
  //   let need_shipping_address = true
  //   let payload = 'invoice_number'
  //   let provider_token = '410694247:TEST:36e662b8-0b87-4eea-9a76-3d8546d7a5be'
  //   let start_parameter = 'Some_param_123'
  //   let is_flexible = true
  //   let currency = 'KZT'
  //   let prices = JSON.stringify([{label: '–ö–æ—Ä–∑–∏–Ω–∞', amount: orderConfirm.sum }])
  //   data.slimbot.sendInvoice(chat_id,title, description, payload, provider_token,start_parameter, currency, prices,is_flexible,need_name, need_phone_number,need_shipping_address)
  //   data.slimbot.on('successful_payment', (data) => {
  //   console.log(`${data.query.from.first_name} just payed ${data.slimbot.successful_payment.total_amount / 100} KZT.`)
  // })

  //   data.slimbot.sendMessage(
  //     data.query.from.id,
  //     `–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ - ${orderConfirm.positions.meta.size}  \n–ù–∞ —Å—É–º–º—É ${orderConfirm.sum /
  //       100} —Ç–µ–Ω–≥–µ`
  //   );
  // data.slimbot.sendMessage(
  //   '@salemsosedtelegram',`New Order from ${data.query.from.first_name}`)
  // console.log(messageFromUser.mes,'+++++++++++++',data)
  // data.slimbot
  //   .sendMessage(
  //     data.query.from.id,
  //     `–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏`,
  //   )
};
export default confirmOrder;
